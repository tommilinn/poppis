// schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Auth model - Handles user authentication
// Stores password and links to a user profile
model Auth {
    id              String @id @default(uuid())
    password        String
    user            Profile?
}

// Profile model - Represents user information
// Contains display information and links to user achievements
model Profile {
    id              String @id @default(uuid())
    username        String @unique
    displayName     String
    auth            Auth   @relation(fields: [id], references: [id])
    achievements    Achievements[]
}

// Achievements model - Junction table for user achievements
// Links profiles to specific achievement types they've earned
model Achievements {
    profileId           String         // Foreign key
    profile             Profile        @relation(fields: [profileId], references: [id])
    achievementTypeId   Int          // Foreign key
    achievementType     AchievementType @relation(fields: [achievementTypeId], references: [id])

    @@id([profileId, achievementTypeId])
    @@unique([profileId, achievementTypeId])
}

// AchievementType model - Defines specific achievements users can earn
// Includes point value, category classification, and optional grouping
model AchievementType {
    id              Int            @id @default(autoincrement())
    name            String         @unique
    points          Int
    categoryId      Int
    description     String?
    groupId         Int?
    category        CategoryType? @relation(fields: [categoryId], references: [id])
    group           AchievementGroup? @relation(fields: [groupId], references: [id])
    achievements    Achievements[] // One-to-many relationship
    
}

// AchievementGroup model - Groups related achievements together
// Allows organizing achievements in logical collections
model AchievementGroup {
    id              Int            @id @default(autoincrement())
    name            String         @unique
    description     String?
    achievementTypes AchievementType[] // One-to-many relationship
}

// CategoryType model - Classifies achievements into categories
// Provides a way to organize achievements by type or theme
model CategoryType {
    id              Int            @id @default(autoincrement())
    name            String         @unique
    description     String?
    achievementTypes AchievementType[] // One-to-many relationship
}